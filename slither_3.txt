(setq myboard '((- -) (3 3)))

(setq mymoves '((1 0 L) (1 0 B) (1 1 B) (1 1 R) (1 1 T) (1 0 T)))

(setq num-of-rows (list-length myboard))

(setq num-of-cols (list-length (car myboard)))

(defun print-row (row r c)
    (cond ((null row)
	    (cond ((member (list r (1- c) 'R) mymoves :test #'equal) (princ "|"))
		    (t (princ " ")) ) )
        (t (cond ((member (list r c 'L) mymoves :test #'equal) (princ "|"))
		    ((member (list r (1- c) 'R) mymoves :test #'equal) (princ "|"))
		    (t (princ " ")) )
            (cond ((equal '- (car row)) (princ " "))
                (t (princ (car row))) )
            (print-row (cdr row) r (1+ c)) ) ) )

(defun print-board (myboard num-of-rows num-of-cols mymoves mypos)
    (cond ((null myboard) (princ "+")
        (setq i 0)
	    (loop
	        (cond ((member (list (1- num-of-rows) i 'B) mymoves :test #'equal) (princ "-") (princ "+"))
	            (t (princ " ") (princ "+")) )
	        (setq i (1+ i))
	        (when (equal i num-of-cols) (terpri) (return t)) ) )
	    (t (princ "+") (setq i 0) (loop
	        (cond ((member (list mypos i 'T) mymoves :test #'equal) (princ "-") (princ "+"))
			    ((member (list (1- mypos) i 'B) mymoves :test #'equal) (princ "-") (princ "+"))
		        (t (princ " ") (princ "+")) )
		    (setq i (1+ i))
		    (when (equal i num-of-cols) (terpri) (return t)) )	 
	     (print-row (car myboard) mypos 0) (terpri)
	     (print-board (cdr myboard) num-of-rows num-of-cols mymoves (1+ mypos)) (terpri) ) ) )