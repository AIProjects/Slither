(setq list-of-moves '())

(defun create-board (filename)
    (setq infile (open filename))
    (setq board (read infile))
	(setq pboard board)
    (setq cboard (mapcar
                     (lambda (x)
                         (cond ((listp x) (mapcar
                                              (lambda (y)
                                                  (cond ((constantp y) 0)
                                                      (t y) ) ) x))) ) board)))
													  
(defun accept-move ()
    (princ "Make a move : ")
    (setq move (read)) 
    (setq move (mapcar (lambda (x) (cond ((equal T x) x) ((symbolp x) x) ((constantp x) (1- x)))) move))
    (setf (nth (car move) (nth (cadr move) cboard)) (1+ (nth (nth 1 move) (nth (nth 0 move) cboard))))
    (push move list-of-moves) )

(setq num-of-rows (list-length board))

(setq num-of-cols (list-length (car board)))

(defun print-row (row r c)
    (cond ((null row)
	    (cond ((member (list r (1- c) 'R) list-of-moves :test #'equal) (princ "|"))
		    (t (princ " ")) ) )
        (t (cond ((member (list r c 'L) list-of-moves :test #'equal) (princ "|"))
		    ((member (list r (1- c) 'R) list-of-moves :test #'equal) (princ "|"))
		    (t (princ " ")) )
            (cond ((equal '- (car row)) (princ " "))
                (t (princ (car row))) )
            (print-row (cdr row) r (1+ c)) ) ) )

(defun print-board (pboard num-of-rows num-of-cols list-of-moves mypos)
    (cond ((null pboard) (princ "+")
        (setq i 0)
	    (loop
	        (cond ((member (list (1- num-of-rows) i 'B) list-of-moves :test #'equal) (princ "-") (princ "+"))
	            (t (princ " ") (princ "+")) )
	        (setq i (1+ i))
	        (when (equal i num-of-cols) (terpri) (return t)) ) )
	    (t (princ "+") (setq i 0) (loop
	        (cond ((member (list mypos i 'T) list-of-moves :test #'equal) (princ "-") (princ "+"))
			    ((member (list (1- mypos) i 'B) list-of-moves :test #'equal) (princ "-") (princ "+"))
		        (t (princ " ") (princ "+")) )
		    (setq i (1+ i))
		    (when (equal i num-of-cols) (terpri) (return t)) )	 
	     (print-row (car pboard) mypos 0) (terpri)
	     (print-board (cdr pboard) num-of-rows num-of-cols list-of-moves (1+ mypos)) (terpri) ) ) )